// NOTE: DO NOT EDIT THIS FILE

/*
  Debug and Fix
  ===================
  Question:
  The Input with the placeholder "Fix me" is a
  dropdown that suppose to display player names
  but for some reason, it's currently not working.
  Your goal is to look through the code to figure out
  what is broken and fix it.
*/
import "semantic-ui-css/semantic.min.css";

import React, { useEffect, useReducer, useMemo, useCallback } from "react";
import ReactDOM from "react-dom";
import { css, cx } from "emotion";
import axios from "axios";
import { Input, Table, Header } from "semantic-ui-react";
import { orderBy, debounce, take, flatten, filter } from "lodash";
import matchSorter from "match-sorter";
import produce from "immer";

var selectedPlayer = 571378961;
var selectedPlayerName = "flaw";
var viableGearLevel = 11;
var tbTeamCharacterCount = 5;
var bFactorInTeams = false;
var tbGeoPlatoons = {
  p1: {
    Bossk: { number: 7 },
    "Jango Fett": { number: 1 },
    "Ig 88": { number: 1 },
    "Nightsister Acolyte": { number: 3 },
    "Nightsister Initate": { number: 5 },
    "Nightsister Zombie": { number: 1 },
    "Asajj Ventress": { number: 1 },
    "Mother Talzin": { number: 9 },
    "Old Daka": { number: 5 },
    Talia: { number: 5 },
    "General Veers": { number: 11 },
    "Range Trooper": { number: 4 },
    "Death Trooper": { number: 1 },
    "Sith Assassin": { number: 3 },
    "Bastila Shan Fallen": { number: 9 },
    "Darth Maul": { number: 7 },
    "Arth Nihilus": { number: 3 },
    "Darth Traya": { number: 4 },
    "Sith Trooper": { number: 8 },
    "Savage Opress": { number: 8 },
    "Darth Revan": { number: 2 },
    "Emperor Palpatine": { number: 2 },
    "Tie Fighter Pilot": { number: 6 },
    "Director Krennic": { number: 5 },
    "Oyal Guard": { number: 4 },
    "Gar Saxon": { number: 4 },
    "Grand Moff Tarkin": { number: 3 },
    "Imperial Super Commando": { number: 2 },
    "Grand Admiral Thrawn": { number: 2 },
    "First Order Officer": { number: 4 },
    "First Order Tie Pilot": { number: 4 },
    "First Order Strormtrooper": { number: 4 },
    "Captain Phasma": { number: 4 },
    "Kylo Ren": { number: 3 },
    "Ig 86 Sentinel Droid": { number: 8 },
    Wampa: { number: 6 },
    "U Ro R Ru R R R": { number: 2 },
    "Tusken Shaman": { number: 2 },
    "Tusken Raider": { number: 1 },
    "Mob Enforcer": { number: 1 }
  },
  p2: {
    bossk: { number: 8, teams: ["bh"] },
    "jango fett": { number: 11, teams: ["bh"] },
    "boba fett": { number: 1, teams: ["bh"] },
    greedo: { number: 2, teams: ["bh"] },
    dengar: { number: 1, teams: ["bh"] },
    "zam wesell": { number: 2 },
    "cad bane": { number: 4 },
    embo: { number: 1 },
    "aurra sing": { number: 1 }
  },
  p3: {
    bossk: { number: 13, teams: ["bh"] },
    "jango fett": { number: 7, teams: ["bh"] },
    dengar: { number: 1, teams: ["bh"] },
    "aurra sing": { number: 4 },
    embo: { number: 3 },
    "cad bane": { number: 1 },
    "ig-88": { number: 1 }
  },
  p4: {
    bossk: { number: 16, teams: ["bh"] },
    "jango fett": { number: 6, teams: ["bh"] },
    "boba fett": { number: 2, teams: ["bh"] },
    dengar: { number: 3, teams: ["bh"] },
    greedo: { number: 1, teams: ["bh"] },
    "ig-88": { number: 2 },
    "zam wesell": { number: 2 },
    "aurra sing": { number: 2 }
  }
};

var tbGeoPlatoonsFillInstructions = {
  p1: [],
  p2: [],
  p3: [],
  p4: []
};

var tbTeams = [
  {
    team: "bh",
    required: ["bossk", "jango fett", "boba fett", "greedo", "dengar"],
    optional: ["embo"]
  },
  {
    team: "geo",
    required: [
      "geonosian brood alpha",
      "geonosian soldier",
      "geonosian spy",
      "poggle the lesser",
      "sun fac"
    ]
  },
  {
    team: "sith-tri",
    required: ["darth traya", "darth sion", "darth nihilus"],
    optional: ["sith trooper", "grand admiral thrawn", "emperor palpatine"]
  },
  {
    team: "drevan",
    required: ["darth revan", "bastila shan (fallen)", "hk-47", "darth malak"],
    optional: ["sith trooper", "sith assassin"]
  },
  {
    team: "revan",
    required: [
      "revan",
      "bastila shan",
      "jolee bindo",
      "grand master yoda",
      "general kenobi"
    ]
  },
  {
    team: "cls",
    required: ["commander luke skywalker", "chewbacca", "han solo"],
    optional: ["c-3po", "r2-d2"]
  },
  {
    team: "nightsisters",
    required: [
      "asajj ventress",
      "mother talzin",
      "old daka",
      "nightsister zombie",
      "talia"
    ]
  },
  {
    team: "jtr",
    required: [
      "rey (jedi training)",
      "bb-8",
      "rey (scavenger)",
      "finn",
      "resistance trooper"
    ]
  },
  {
    team: "gg",
    required: [
      "general grievous",
      "b1 battle droid",
      "b2 super battle droid",
      "droideka",
      "ig-100 magnaguard"
    ],
    optional: ["imperial probe droid"]
  },
  {
    team: "pad",
    required: [
      "padme amidala",
      "jedi knight anakin",
      "ahsoka tano",
      "general kenobi",
      "barriss offee"
    ]
  }
];

const initialState = {
  unitMap: {},
  units: [],
  playerList: [],
  filter: "",
  playerFilter: "",
  selectedUnitName: "",
  unitSortKey: "power"
};

const reducer = (state, action) => {
  switch (action.type) {
    case "INIT":
      return produce(state, draft => {
        draft.unitMap = action.payload.unitMap;
        draft.units = action.payload.units;
        draft.playerList = action.payload.playerList;
        // draft.units = null;
      });

    // return {
    //   ...initialState,
    //   ...action.payload
    // };
    case "SET_UNIT_NAME":
      return {
        ...state,
        selectedUnitName: action.payload
      };
    case "SET_FILTER":
      return {
        ...state,
        filter: action.payload
      };
    case "SET_PLAYER_FILTER":
      return {
        ...state,
        playerFilter: action.payload
      };
    default:
      break;
  }
};

const App = () => {
  const [state, dispatch] = useReducer(reducer, initialState);

  useEffect(() => {
    (async () => {
      const guildData = await fetchGuildData();

      dispatch({ type: "INIT", payload: guildData });
    })();
  }, []);

  const onFilterChange = useCallback(
    debounce((event, { value }) => {
      dispatch({ type: "SET_FILTER", payload: value });
    }, 500),
    []
  );

  const onPlayerFilterChange = useCallback(
    debounce((event, { value }) => {
      dispatch({ type: "SET_PLAYER_FILTER", payload: value });
    }, 500),
    []
  );

  const unitPlayers = state.unitMap[state.selectedUnitName] || [];
  const sortedUnitPlayers = useMemo(
    () => orderBy(unitPlayers, [state.unitSortKey]),
    //() => orderBy(unitPlayers, ["field1", "field2"], ["desc", "asc"]),
    [state.unitSortKey, unitPlayers]
  );

  const caculateFillInstructions = useMemo(() => {
    //SPAM
    return flatten(
      Object.keys(tbGeoPlatoons.p1).map(character => {
        const predicate = { rarity: 7 };
        const filtered = filter(state.unitMap[character] || [], predicate);
        // state.unitSortKey = 'power'
        const sortedCharacterPlayers = orderBy(filtered, [state.unitSortKey]);
        return take(sortedCharacterPlayers, tbGeoPlatoons.p1[character].number);
      })
    );
  }, [state.unitSortKey, state.unitMap]);

  const filteredUnits = state.filter
    ? matchSorter(state.units, state.filter)
    : state.units;

  return (
    <div className={styles}>
      <div>
        Player Instructions.
        <br />
        <nav className="unit-list">
          <Input
            list="players"
            icon="search"
            placeholder="Fix me"
            fluid
            onChange={onPlayerFilterChange}
          />
          <datalist id="players">
            {state.playerList.map((x, idx) => (
              <option value={x.name} />
            ))}
          </datalist>
        </nav>
        <main className="unit-players">
          <Table unstackable>
            <Table.Header>
              <Table.Row>
                <Table.HeaderCell>Unit</Table.HeaderCell>
                <Table.HeaderCell>Player</Table.HeaderCell>
              </Table.Row>
            </Table.Header>
            <Table.Body>
              {caculateFillInstructions
                .filter(x => x.player.name === state.playerFilter)
                .map((x, idx) => (
                  <Table.Row>
                    <Table.Cell textAlign="right">{x.name}</Table.Cell>
                    <Table.Cell textAlign="right">{x.player.name}</Table.Cell>
                  </Table.Row>
                ))}
            </Table.Body>
          </Table>
        </main>
        <br />
        <nav className="unit-list">
          <Input
            icon="search"
            placeholder="Search"
            fluid
            onChange={onFilterChange}
          />
          <div className="unit-list-items">
            {filteredUnits.map(x => (
              <button
                key={x}
                className={cx({ active: state.selectedUnitName === x })}
                onClick={() => {
                  dispatch({ type: "SET_UNIT_NAME", payload: x });
                }}
              >
                {x}
              </button>
            ))}
          </div>
        </nav>
      </div>
      <main className="unit-players">
        <Table unstackable>
          <Table.Header>
            <Table.Row>
              <Table.HeaderCell>Power</Table.HeaderCell>
              <Table.HeaderCell>Name</Table.HeaderCell>
              <Table.HeaderCell textAlign="right">Level</Table.HeaderCell>
              <Table.HeaderCell textAlign="right">Gear Level</Table.HeaderCell>
              <Table.HeaderCell textAlign="right">Combat Type</Table.HeaderCell>
              <Table.HeaderCell textAlign="right">Rarity</Table.HeaderCell>
            </Table.Row>
          </Table.Header>
          <Table.Body>
            {sortedUnitPlayers
              .filter(x => x.rarity === 7)
              .map((x, idx) => (
                <Table.Row key={`${x.base_id}_${idx}`}>
                  <Table.Cell>
                    <Header as="h2" textAlign="center">
                      {x.power}
                    </Header>
                  </Table.Cell>
                  <Table.Cell>
                    <a
                      target="_blank"
                      href={`https://swgoh.gg/${x.url}`}
                      rel="noopener noreferrer"
                    >
                      {x.player.name}
                    </a>
                  </Table.Cell>
                  <Table.Cell textAlign="right">{x.level}</Table.Cell>
                  <Table.Cell textAlign="right">{x.gear_level}</Table.Cell>
                  <Table.Cell textAlign="right">{x.combat_type}</Table.Cell>
                  <Table.Cell textAlign="right">{x.rarity}</Table.Cell>
                </Table.Row>
              ))}
          </Table.Body>
        </Table>
      </main>
    </div>
  );
};

const fetchGuildData = async () => {
  const response = await axios.get(
    //'https://cors-anywhere.herokuapp.com/https://swgoh.gg/api/guild/19538/',
    "https://cors-anywhere.herokuapp.com/https://swgoh.gg/api/guild/10143/"
  );

  const map = {};
  const playerList = [];

  response.data.players.forEach(player => {
    playerList.push({ name: player.data.name });

    const { data: playerData, units } = player;
    units.forEach(unit => {
      const { data } = unit;
      if (!map[data.name]) {
        map[data.name] = [];
      }

      map[data.name].push({
        ...data,
        player: playerData
      });
    });
  });

  debugger;
  return {
    unitMap: map,
    units: Object.keys(map).sort(),
    playerList: playerList.sort((a, b) => (a.name > b.name ? 1 : -1))
  };
};

const styles = css`
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  flex: 1;
  flex-direction: row;
  display: flex;

  .unit-list {
    width: 300px;
    display: flex;
    flex-direction: column;
    border-right: solid 1px rgba(0, 0, 0, 0.2);

    .ui.input > input {
      border-radius: 0;
    }
  }

  .unit-list-items {
    flex: 1;
    overflow-y: scroll;

    button {
      display: block;
      border: none;
      width: 100%;
      padding: 10px 15px;
      margin: 0;
      text-align: left;
      border-bottom: solid 1px rgba(0, 0, 0, 0.2);

      &.active {
        background: #e4e4e4;
      }
    }
  }

  .unit-players {
    flex: 1;
    overflow-y: scroll;
  }
`;

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);
